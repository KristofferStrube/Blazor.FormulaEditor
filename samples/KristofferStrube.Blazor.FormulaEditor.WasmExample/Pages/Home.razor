@page "/"
@using KristofferStrube.Blazor.FormulaEditor.BooleanExpressions
@using KristofferStrube.Blazor.FormulaEditor.Expressions

<PageTitle>Blazor Formula Editor</PageTitle>

<h1>Blazor Formula Editor</h1>
<p>The following are some samples of expressions that can be edited:</p>
<MathEditor Expression="sineWave" AvailableIdentifiers=@identifiers />
<br />
<br />
<MathEditor Expression="squareWave" AvailableIdentifiers=@identifiers />
<br />
<br />
<MathEditor Expression="sawtoothWave" AvailableIdentifiers=@identifiers />
<br />
<br />
<MathEditor Expression="triangleWave" AvailableIdentifiers=@identifiers />
@code {
    private static readonly Identifier nIdentifier = new Identifier("n", () => 1);
    private static readonly Identifier xIdentifier = new Identifier("x", () => 1);
    private static readonly Identifier yIdentifier = new Identifier("y", () => 1);
    private static readonly List<Identifier> identifiers = [nIdentifier, xIdentifier, yIdentifier];

    private Expression sineWave = new CasesExpression()
        {
            Cases = [new() {
                Value = new NumericExpression() { Value = 1 },
                Condition = new EqualsOperator() { First = new IdentifierExpression() { Value = nIdentifier }, Second = new NumericExpression() { Value = 1 } }
            }],
            Otherwise = new NumericExpression() { Value = 0 },
        };

    private Expression squareWave = new MultiplicationOperator()
        {
            First = new FractionOperator()
            {
                Numerator = new NumericExpression() { Value = 2 },
                Denominator = new MultiplicationOperator()
                {
                    First = new IdentifierExpression() { Value = nIdentifier },
                    Second = new ConstantExpression() { Value = new Constant("π", Math.PI) },
                    ExplicitOperator = false
                }
            },
            Second = new SubtractionOperator()
            {
                First = new NumericExpression() { Value = 1 },
                Second = new PowerOperator()
                {
                    Value = new NumericExpression() { Value = -1, Parenthesis = true },
                    Power = new IdentifierExpression() { Value = nIdentifier }
                },
                Parenthesis = true
            },
            ExplicitOperator = false
        };

    private Expression sawtoothWave = new MultiplicationOperator()
        {
            First = new PowerOperator()
            {
                Value = new NumericExpression() { Value = -1, Parenthesis = true },
                Power = new AdditionOperator()
                {
                    First = new IdentifierExpression() { Value = nIdentifier },
                    Second = new NumericExpression() { Value = 1 },
                    Parenthesis = true
                }
            },
            Second = new FractionOperator()
            {
                Numerator = new NumericExpression() { Value = 2 },
                Denominator = new MultiplicationOperator()
                {
                    First = new IdentifierExpression() { Value = nIdentifier },
                    Second = new ConstantExpression() { Value = new Constant("π", Math.PI) },
                    ExplicitOperator = false
                }
            },
            ExplicitOperator = false
        };

    private Expression triangleWave = new FractionOperator()
        {
            Numerator = new MultiplicationOperator()
            {
                First = new NumericExpression() { Value = 8 },
                Second = new FunctionExpression()
                {
                    Function = new Function("sin", v => Math.Sin(v)),
                    Input = new FractionOperator()
                    {
                        Numerator = new MultiplicationOperator()
                        {
                            First = new IdentifierExpression() { Value = nIdentifier },
                            Second = new ConstantExpression() { Value = new Constant("π", Math.PI) },
                            ExplicitOperator = false
                        },
                        Denominator = new NumericExpression() { Value = 2 }
                    },
                    Parenthesis = false
                },
                ExplicitOperator = false
            },
            Denominator = new PowerOperator()
            {
                Value = new MultiplicationOperator()
                {
                    First = new ConstantExpression() { Value = new Constant("π", Math.PI) },
                    Second = new IdentifierExpression() { Value = nIdentifier },
                    ExplicitOperator = false,
                    Parenthesis = true
                },
                Power = new NumericExpression() { Value = 2 }
            }
        };
}